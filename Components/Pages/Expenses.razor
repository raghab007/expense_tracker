@page "/view-expenses"
@using DotnetCourseowork.Models
@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="text-primary">Manage Expenses</h3>
        <button class="btn btn-outline-primary" @onclick="NavigateToHome">
            Back to Home
        </button>
    </div>
    <!-- Filters Section -->
    <div class="card shadow-sm p-4 mb-4">
        <h5 class="mb-3 text-secondary">Filter Expenses</h5>

        <!-- Type Filters -->
        <div class="row text-center mb-3">
            <div class="col-md-4">
                <button class="btn btn-outline-success w-100 rounded-pill" @onclick="ShowCreditExpenses">
                    Cash Inflow (@creditCount)
                </button>
            </div>
            <div class="col-md-4">
                <button class="btn btn-outline-danger w-100 rounded-pill" @onclick="ShowDebitExpenses">
                    Cash Outflow (@debitCount)
                </button>
            </div>
            <div class="col-md-4">
                <button class="btn btn-outline-dark w-100 rounded-pill" @onclick="ShowAllExpenses">
                    All Expenses (@totalCount)
                </button>
            </div>
        </div>

        <!-- Filter by Amount -->
        <div class="row mb-3">
            <div class="col-md-6">
                <input type="number" class="form-control" placeholder="Min Amount" @bind="minAmount"/>
            </div>
            <div class="col-md-6">
                <input type="number" class="form-control" placeholder="Max Amount" @bind="maxAmount"/>
            </div>
        </div>
        <!-- Filter by Date -->
        <div class="row mb-3">
            <div class="col-md-6">
                <input type="date" class="form-control" @bind="startDate"/>
            </div>
            <div class="col-md-6">
                <input type="date" class="form-control" @bind="endDate"/>
            </div>
        </div>

        <!-- Filter by Description -->
        <input type="text" class="form-control mb-3" placeholder="Search by Description" @bind="descriptionFilter"/>

        <!-- Filter by Tag -->
        <div class="row mb-3">
            <div class="col-md-12">
                <select class="form-control" @bind="selectedTag">
                    <option value="">Select Tag</option>
                    @foreach (var tag in tags)
                    {
                        <option value="@tag">@tag</option>
                    }
                </select>
            </div>
        </div>

        <!-- Filters -->
        <div class="row">
            <div class="col-md-6">
                <button class="btn btn-dark w-100 rounded-pill" @onclick="ApplyFilters">Apply Filters</button>
            </div>
            <div class="col-md-6">
                <button class="btn btn-secondary w-100 rounded-pill" @onclick="ClearFilters">Clear Filters</button>
            </div>
        </div>
    </div>

    <button class="btn btn-dark mb-3 rounded-pill" @onclick="SortByDate">Sort by Date</button>

    <!-- Expenses Table -->
    <div class="card shadow-sm p-3">
        <h5 class="text-secondary mb-3">Expense Details</h5>
        <table class="table table-bordered table-striped">
            <thead class="thead-dark">
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Expense Type</th>
                <th>Expense Tag</th>
                <th>Note</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @if (filteredExpenses.Count > 0)
            {
                @foreach (var expense in filteredExpenses)
                {
                    <tr>
                        <td>@expense.Date.ToString()</td>
                        <td>@expense.Description</td>
                        <td>$@expense.Amount</td>
                        <td>@expense.ExpenseType</td>
                        <td>@expense.ExpenseTag</td>
                        <td>@(string.IsNullOrEmpty(expense.Note) ? "No Note" : expense.Note)</td>
                        <td>
                            <button class="btn btn-warning btn-sm" @onclick="() => OpenNoteModal(expense)">Add/Edit Note</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteConfirmationModal(expense)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="7" class="text-center">No expenses available.</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    @if (isNoteModalVisible)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="noteModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="noteModalLabel">Add/Edit Note</h5>
                        <button type="button" class="close" @onclick="CloseNoteModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <textarea class="form-control" @bind="noteText" rows="4"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseNoteModal">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveNote">Save Note</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (isDeleteConfirmationModalVisible)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                        <button type="button" class="close" @onclick="CloseDeleteConfirmationModal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this expense?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteConfirmedExpense">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Expense> expenses = new List<Expense>();
    private List<Expense> filteredExpenses = new List<Expense>();
    private List<string> tags = new List<string>(); // List to hold unique tags
    private decimal? minAmount;
    private decimal? maxAmount;
    private DateTime? startDate;
    private DateTime? endDate;
    private string descriptionFilter;
    private string selectedTag;

    private int creditCount;
    private int debitCount;
    private int totalCount;

    private bool isNoteModalVisible = false;
    private bool isDeleteConfirmationModalVisible = false;
    private string noteText = string.Empty;
    private Expense selectedExpense;
    private Expense expenseToDelete;

    protected override async Task OnInitializedAsync()
    {
        expenses = UserService.GetUserExpenses();
        filteredExpenses = expenses;
        UpdateCounts();

        // Populate the tags list with unique tags
        tags = expenses.Select(e => e.ExpenseTag).Distinct().ToList();
    }

    private void ShowCreditExpenses()
    {
        filteredExpenses = expenses.Where(e => e.ExpenseType.Equals("credit", StringComparison.OrdinalIgnoreCase)).ToList();
        UpdateCounts();
    }

    private void ShowDebitExpenses()
    {
        filteredExpenses = expenses.Where(e => e.ExpenseType.Equals("debit", StringComparison.OrdinalIgnoreCase)).ToList();
        UpdateCounts();
    }

    private void ShowAllExpenses()
    {
        filteredExpenses = expenses;
        UpdateCounts();
    }

    private void ApplyFilters()
    {
        filteredExpenses = expenses;

        if (minAmount.HasValue)
            filteredExpenses = filteredExpenses.Where(e => e.Amount >= minAmount.Value).ToList();

        if (maxAmount.HasValue)
            filteredExpenses = filteredExpenses.Where(e => e.Amount <= maxAmount.Value).ToList();

        if (startDate.HasValue)
            filteredExpenses = filteredExpenses.Where(e => e.Date >= startDate.Value).ToList();

        if (endDate.HasValue)
            filteredExpenses = filteredExpenses.Where(e => e.Date <= endDate.Value).ToList();

        if (!string.IsNullOrWhiteSpace(descriptionFilter))
            filteredExpenses = filteredExpenses.Where(e => e.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase)).ToList();

        if (!string.IsNullOrWhiteSpace(selectedTag))
        {
            // Ensure the tag is not null before filtering
            filteredExpenses = filteredExpenses.Where(e => e.ExpenseTag != null && e.ExpenseTag.Equals(selectedTag, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        UpdateCounts();
    }


    private void ClearFilters()
    {
        minAmount = null;
        maxAmount = null;
        startDate = null;
        endDate = null;
        descriptionFilter = null;
        selectedTag = null;
        filteredExpenses = expenses;
        UpdateCounts();
    }

    private void SortByDate()
    {
        filteredExpenses = filteredExpenses.OrderByDescending(e => e.Date).ToList();
    }

    private async Task NavigateToHome() => NavigationManager.NavigateTo("/home");

    private void DeleteExpense(Expense expense)
    {
        expenses.Remove(expense);
        filteredExpenses.Remove(expense);
        UpdateCounts();
    }

    private void OpenDeleteConfirmationModal(Expense expense)
    {
        expenseToDelete = expense;
        isDeleteConfirmationModalVisible = true;
    }

    private void CloseDeleteConfirmationModal()
    {
        isDeleteConfirmationModalVisible = false;
        expenseToDelete = null;
    }

    private void DeleteConfirmedExpense()
    {
        if (expenseToDelete != null)
        {
            DeleteExpense(expenseToDelete);
        }
        CloseDeleteConfirmationModal();
    }

    private void OpenNoteModal(Expense expense)
    {
        selectedExpense = expense;
        noteText = expense.Note ?? string.Empty;
        isNoteModalVisible = true;
    }

    private void CloseNoteModal()
    {
        isNoteModalVisible = false;
        selectedExpense = null;
        noteText = string.Empty;
    }

    private void SaveNote()
    {
        if (selectedExpense != null)
        {
            var result = UserService.UpdateExpenseNote(selectedExpense.Id, noteText);

            if (result)
            {
                selectedExpense.Note = noteText;
                CloseNoteModal();
                UpdateCounts();
            }
        }
    }

    private void UpdateCounts()
    {
        creditCount = expenses.Count(e => e.ExpenseType.Equals("credit", StringComparison.OrdinalIgnoreCase));
        debitCount = expenses.Count(e => e.ExpenseType.Equals("debit", StringComparison.OrdinalIgnoreCase));
        totalCount = expenses.Count;
    }
}
