@page "/debts"
@using DotnetCourseowork.Models
@inject UserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<div class="container-fluid mt-4">
    <div class="d-flex flex-column align-items-center">
        <h3 class="text-center">Balance: @balance</h3>
        <div class="w-100" style="max-width: 1000px;">

            <!-- Page Title -->
            <div class="mb-4">
                <h5 class="text-primary">Add Debt</h5>
            </div>

            <!-- Debt Form -->
            <div class="bg-white p-4 rounded shadow-sm mb-4">
                <EditForm Model="@NewDebt" OnValidSubmit="@HandleAddDebt">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="description" class="form-label fw-bold">Description</label>
                        <InputText id="description" class="form-control" @bind-Value="NewDebt.Description" placeholder="Enter debt description" />
                    </div>

                    <div class="mb-3">
                        <label for="date" class="form-label fw-bold">Date</label>
                        <InputDate id="date" class="form-control" @bind-Value="NewDebt.Date" />
                    </div>

                    <div class="mb-3">
                        <label for="amount" class="form-label fw-bold">Amount</label>
                        <InputGroup>
                            <InputNumber id="amount" class="form-control" @bind-Value="NewDebt.Amount" />
                            <InputGroupText></InputGroupText>
                        </InputGroup>
                        @if (NewDebt.Amount <= 0)
                        {
                            <span class="text-danger">Amount must be greater than 0</span>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="source" class="form-label fw-bold">Source</label>
                        <InputText id="source" class="form-control" @bind-Value="NewDebt.Source" placeholder="Enter source of debt" />
                        @if (string.IsNullOrWhiteSpace(NewDebt.Source))
                        {
                            <span class="text-danger">Source cannot be empty</span>
                        }
                    </div>

                    <button type="submit" class="btn btn-primary w-100 mt-3" disabled="@(!IsFormValid())">
                        Add Debt
                    </button>
                </EditForm>
            </div>

            <!-- Filter Buttons -->
            <div class="mt-4 d-flex justify-content-center gap-3">
                <button class="btn btn-outline-primary @GetButtonClass("All")" @onclick="FilterAll">
                    All (@_debts.Count)
                </button>
                <button class="btn btn-outline-warning @GetButtonClass("Pending")" @onclick="FilterPending">
                    Pending (@_debts.Count(d => !d.Paid))
                </button>
                <button class="btn btn-outline-success @GetButtonClass("Paid")" @onclick="FilterPaid">
                    Paid (@_debts.Count(d => d.Paid))
                </button>
            </div>

            <!-- Debts Table -->
            <div class="bg-white p-4 rounded shadow-sm mt-4">
                <h5 class="text-primary mb-3">Debt List</h5>
                <table class="table table-hover">
                    <thead>
                    <tr>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Date</th>
                        <th>Source</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody>
                        @foreach (var debt in FilteredDebts)
                        {
                            <tr>
                                <td>@debt.Description</td>
                                <td> @currency @debt.Amount.ToString()</td>
                                <td>@debt.Date?.ToString("yyyy-MM-dd")</td>
                                <td>@debt.Source</td>
                                <td class="fw-bold @((debt.Paid ? "text-success" : "text-warning"))">
                                    @(debt.Paid ? "Paid" : "Pending")
                                </td>
                                <td>
                                    @if (!debt.Paid)
                                    {
                                        <button @onclick="@(() => HandleMarkAsPaid(debt.Id))" class="btn btn-success btn-sm">
                                            Mark as Paid
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private Debt NewDebt = new Debt();
    private string balance = "100";
    private List<Debt> _debts = new();
    private string selectedFilter = "All";
    private string NewSource = string.Empty;

    private string currency;
    private IEnumerable<Debt> FilteredDebts
    {
        get
        {
            return selectedFilter switch
            {
                "Pending" => _debts.Where(d => !d.Paid),
                "Paid" => _debts.Where(d => d.Paid),
                _ => _debts
            };
        }
    }

    private bool IsFormValid() =>
        !string.IsNullOrWhiteSpace(NewDebt.Source) && NewDebt.Amount > 0;

    private string GetButtonClass(string filter) => selectedFilter == filter ? "active" : string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = UserService.GetCurrentUser();
        if (currentUser != null)
        {
            balance = currentUser.TotalBalance.ToString();
            _debts = UserService.GetAllDebtsForUser();
            currency = UserService.GetCurrency();
        }
    }

    private async Task HandleAddDebt()
    {
        if (!IsFormValid())
        {
            Snackbar.Add("Please fill out all required fields correctly.", Severity.Warning);
            return;
        }

        try
        {
            bool debtAdded = UserService.AddDebtForUser(NewDebt);

            if (debtAdded)
            {
                Snackbar.Add("Debt added successfully!", Severity.Success);
                var currentUser = UserService.GetCurrentUser();
                balance = currentUser?.TotalBalance.ToString() ?? "0";
                NewDebt = new Debt();
                _debts = UserService.GetAllDebtsForUser();
            }
            else
            {
                Snackbar.Add("Insufficient balance to add the debt", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to add debt: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleMarkAsPaid(int debtId)
    {
        try
        {
            bool markedAsPaid = UserService.MarkDebtAsPaid(debtId);

            if (markedAsPaid)
            {
                Snackbar.Add("Debt marked as paid successfully!", Severity.Success);
                _debts = UserService.GetAllDebtsForUser();
            }
            else
            {
                Snackbar.Add("Failed to mark the debt as paid", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to mark the debt as paid: {ex.Message}", Severity.Error);
        }
    }
    

    private void FilterAll()
    {
        selectedFilter = "All";
    }

    private void FilterPending()
    {
        selectedFilter = "Pending";
    }

    private void FilterPaid()
    {
        selectedFilter = "Paid";
    }
}
