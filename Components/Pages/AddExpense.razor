@page "/add-expense"
@using DotnetCourseowork.Models
@inject UserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="text-center mb-4">
        <h3>Balance: @balance</h3>
    </div>
    <div class="card shadow p-4">
        <!-- Page Title -->
        <div class="mb-3">
            <h5 class="text-primary">Add Expense</h5>
        </div>

        <!-- Expense Form -->
        <div class="mb-4">
            <EditForm Model="@NewExpense" OnValidSubmit="@HandleAddExpense">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="description" class="form-label fw-bold">Description</label>
                    <InputText id="description" class="form-control" @bind-Value="NewExpense.Description" />
                </div>

                <div class="mb-3">
                    <label for="date" class="form-label fw-bold">Date</label>
                    <InputDate id="date" class="form-control" @bind-Value="NewExpense.Date" />
                </div>

                <div class="mb-3">
                    <label for="amount" class="form-label fw-bold">Amount</label>
                    <InputNumber id="amount" class="form-control" @bind-Value="NewExpense.Amount" />
                    @if (NewExpense.Amount <= 0)
                    {
                        <span class="text-danger">Amount must be greater than 0</span>
                    }
                </div>

                <div class="mb-3">
                    <label for="expense-tag" class="form-label fw-bold">Tag</label>
                    <InputSelect id="expense-tag" class="form-select" @bind-Value="NewExpense.ExpenseTag">
                        <option value="">Select Tag</option>
                        @foreach (var tag in Tags)
                        {
                            <option value="@tag">@tag</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label for="expense-type" class="form-label fw-bold">Expense Type</label>
                    <InputSelect id="expense-type" class="form-select" @bind-Value="NewExpense.ExpenseType">
                        <option value="">Select Type</option>
                        <option value="Credit">Credit</option>
                        <option value="Debit">Debit</option>
                    </InputSelect>
                </div>

                <button type="submit" class="btn btn-dark btn-block w-100 mt-3">
                    Add Expense
                </button>
            </EditForm>
        </div>

        <!-- Add Custom Tag -->
        <div>
            <h6 class="fw-bold mb-3">Add a Custom Tag</h6>
            <div class="d-flex">
                <InputText id="new-tag" class="form-control me-2" @bind-Value="NewTag" placeholder="Enter tag" />
                <button class="btn btn-dark" @onclick="HandleAddTag">
                    Add Tag
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private Expense NewExpense = new Expense();
    private string balance = "0";
    private List<string> Tags = new();
    private string NewTag = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var currentUser = UserService.GetCurrentUser();
        if (currentUser != null)
        {
            balance = currentUser.TotalBalance.ToString();
            Tags = UserService.GetAllTags();
        }
    }

    private async Task HandleAddExpense()
    {
        if (NewExpense.Amount <= 0)
        {
            Snackbar.Add("Amount must be greater than 0", Severity.Warning);
            return;
        }

        try
        {
            bool expenseAdded = UserService.AddExpenseForUser(NewExpense);

            if (expenseAdded)
            {
                Snackbar.Add("Expense added successfully!", Severity.Success);
                var currentUser = UserService.GetCurrentUser();
                balance = currentUser?.TotalBalance.ToString() ?? "0";
                NewExpense = new Expense();
            }
            else
            {
                Snackbar.Add("Insufficient balance to add the expense", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to add expense: {ex.Message}", Severity.Error);
        }
    }

    private void HandleAddTag()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(NewTag))
            {
                Snackbar.Add("Tag cannot be empty", Severity.Warning);
                return;
            }

            var tagAdded = UserService.AddTagToUser(NewTag);

            if (tagAdded)
            {
                Snackbar.Add("Tag added successfully!", Severity.Success);
                Tags = UserService.GetAllTags();
                NewTag = string.Empty;
            }
            else
            {
                Snackbar.Add("Tag already exists", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to add tag: {ex.Message}", Severity.Error);
        }
    }
}
