@page "/home"
@using DotnetCourseowork.Models
@inject UserService UserService
@inject NavigationManager NavigationManager

<MudLayout>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large">
            <!-- Dashboard Header -->
            <MudGrid Container Spacing="4" Class="mb-6">
                <MudItem xs="12">
                    <MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Primary">Expense Tracker Dashboard</MudText>
                </MudItem>
            </MudGrid>
            
            <div style="margin-top: 50px; margin-bottom: 50px">
                <MudGrid Container Spacing="6" Class="mt-6">
                    <MudItem xs="12" sm="4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth OnClick="@NavigateToAddExpense">Add Expense</MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" FullWidth OnClick="@NavigateToViewExpenses">View Expenses</MudButton>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudButton Variant="Variant.Filled" Color="Color.Info" FullWidth OnClick="@NavigateToViewDebts">View Debts</MudButton>
                    </MudItem>
                </MudGrid>
            </div>

            <!-- Financial Overview -->
            <MudGrid Container Spacing="6" Class="mb-6">
                @foreach (var card in GetFinancialCards())
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Class="pa-4" Elevation="5" Square="true">
                            <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Dark">@card.Title</MudText>
                            <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Dark">
                                @currency  @card.Value
                            </MudText>
                        </MudCard>
                    </MudItem>
                }

                <!-- Additional Statistics -->
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="pa-4" Elevation="5" Square="true">
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Dark">Total Transactions</MudText>
                        <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Dark">
                            @totalTransactions
                        </MudText>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="pa-4" Elevation="5" Square="true">
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Dark">Total Debts (Cleared)</MudText>
                        <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Success">
                            @clearedDebts
                        </MudText>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="pa-4" Elevation="5" Square="true">
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Dark">Total Debts (Uncleared)</MudText>
                        <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Error">
                            @unclearedDebts
                        </MudText>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="pa-4" Elevation="5" Square="true">
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Dark">Total Debts (All)</MudText>
                        <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Info">
                            @totalDebts
                        </MudText>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <!-- Financial Overview Donut Chart -->
            <MudGrid Container Spacing="6" Class="mt-6">
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="pa-4" Elevation="4" Square="true">
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary">Financial Overview</MudText>
                        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@chartData" InputLabels="@chartLabels"></MudChart>
                    </MudCard>
                </MudItem>

                <!-- Expense Distribution by Tag Donut Chart -->
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Class="pa-4" Elevation="4" Square="true">
                        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Primary">Expense Distribution by Tag</MudText>
                        <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="TagIndex" InputData="@tagChartData" InputLabels="@tagChartLabels"></MudChart>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <!-- Recent Transactions -->
            <MudGrid Container Spacing="6" Class="mt-6">
                <MudItem xs="12">
                    <MudCard Class="pa-4" Elevation="4">
                        <MudText Typo="Typo.h6" Align="Align.Left" Color="Color.Primary">Recent Expenses</MudText>
                        <MudTable Items="@recentExpenses" Hover="true">
                            <HeaderContent>
                                <MudTh>Date</MudTh>
                                <MudTh>Description</MudTh>
                                <MudTh>Amount</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Date.ToString()</MudTd>
                                <MudTd>@context.Description</MudTd>
                                <MudTd>@currency @context.Amount</MudTd>
                                <MudTd>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => DeleteExpense(context))">Delete</MudButton>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <!-- Unpaid Debts Table -->
            <MudGrid Container Spacing="6" Class="mt-6">
                <MudItem xs="12">
                    <MudCard Class="pa-4" Elevation="4">
                        <MudText Typo="Typo.h6" Align="Align.Left" Color="Color.Primary">Unpaid Debts</MudText>
                        <MudTable Items="@unpaidDebts" Hover="true">
                            <HeaderContent>
                                <MudTh>Date</MudTh>
                                <MudTh>Description</MudTh>
                                <MudTh>Amount</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Date.ToString()</MudTd>
                                <MudTd>@context.Description</MudTd>
                                <MudTd>@currency @context.Amount</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCard>
                </MudItem>
            </MudGrid>

        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private List<Expense> recentExpenses = new();
    private List<Debt> unpaidDebts = new();
    private double totalInflow;
    private double totalOutflow;
    private double currentBalance;

    private double totalTransactions;
    private int clearedDebts;
    private int unclearedDebts;
    private int totalDebts;

    private string currency;

    private int Index = -1;
    private double[] chartData;
    private string[] chartLabels;

    private int TagIndex = -1;
    private double[] tagChartData;
    private string[] tagChartLabels;

    protected override async Task OnInitializedAsync()
    {
        await InitializeData();
    }

    private async Task InitializeData()
    {
        // Fetch financial data
        totalInflow = UserService.GetTotalInflow();
        totalOutflow = UserService.GetTotalOutflow();
        currentBalance = UserService.GetCurrentUser().TotalBalance;
        currency = UserService.GetCurrency();

        recentExpenses = UserService.GetRecentTransactions(5);

        totalTransactions = recentExpenses.Count;
        var debts = UserService.GetAllDebtsForUser();
        clearedDebts = debts.Count(d => d.Paid);
        unclearedDebts = debts.Count(d => !d.Paid);
        totalDebts = debts.Count;

        // Filter unpaid debts
        unpaidDebts = debts.Where(d => !d.Paid).ToList();

        // Set financial chart data
        chartData = new double[] { totalInflow, totalOutflow, totalDebts };
        chartLabels = new string[] { "Total Inflow", "Total Outflow", "Total Debts" };

        // Fetch and set expense tag data
        var tagExpenses = UserService.GetExpensesGroupedByTag();
        tagChartData = tagExpenses.Values.ToArray();
        tagChartLabels = tagExpenses.Keys.ToArray();
    }

    private List<(string Title, string Color, double Value)> GetFinancialCards()
    {
        return new()
        {
            ("Total Inflow", "Color.Primary", totalInflow),
            ("Total Outflow", "Color.Error", totalOutflow),
            ("Current Balance", "Color.Info", currentBalance)
        };
    }

    private void DeleteExpense(Expense expense)
    {
        UserService.DeleteExpense(expense.Id);
        recentExpenses.Remove(expense);
    }

    private void NavigateToAddExpense()
    {
        NavigationManager.NavigateTo("/add-expense");
    }

    private void NavigateToViewExpenses()
    {
        NavigationManager.NavigateTo("/view-expenses");
    }

    private void NavigateToViewDebts()
    {
        NavigationManager.NavigateTo("/debts");
    }
}
